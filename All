# final. species specific on Italy for birds

# input data: - world AOH maps for Birds; - protected areas layer form WDPA, and IBAs from LIPU

# AOH downloaded from dryads how to obtain a folder of AOH cropped on Italian territory. 

# codice per filtrare i file AOH con extent europea e cropparli -> EU_final da cui partire per poi filtrare i vari paesi

### su locale

# from all -> intersected with ext(eu_admin_no_beyond.shp)
library(terra)
library(sf)
library(dplyr)
setwd("D:/")

eu <- vect("corridors/europe_admin_wgs/eu_admin_nobeyond_wgs.shp")
eu <- project(eu, "EPSG:4326")
crs(eu)
eu_extent <- ext(eu)

prova_crs <- rast("corridors/AOH/Extracted/Birds_migratory_accipitriformes/Accipiter_badius_B.tif")
crs(prova_crs)


base_path <- "corridors/AOH/Extracted/"
ordini <- list.dirs(base_path, recursive = FALSE)
rasters_to_keep <- list()

for (ordine in ordini) {
  
  raster_files <- list.files(ordine, pattern = "\\.tif$", full.names = TRUE)
  
  for (raster_file in raster_files) {
    
    r <- rast(raster_file)
    
    if (relate(ext(r), eu_extent, "intersects")) {
      rasters_to_keep <- append(rasters_to_keep, raster_file)
    }
  }
}

print(rasters_to_keep)

# cosi ne seleziona 1020.  



##### croppo i file all'extent eu

output_folder <- "corridors/AOH/EU_final/"
dir.create(output_folder, recursive =T)

europe_mask <- vect("corridors/europe_admin_wgs/eu_admin_nobeyond_wgs.shp")

# Funzione per processare e salvare un singolo raster
process_raster <- function(raster_path, mask, output_folder) {
  tryCatch({
    # Carica il raster
    r <- rast(raster_path)
    
    # Croppa e maschera il raster
    cropped_raster <- crop(r, mask, snap = "out")  # Croppa il raster
    masked_raster <- mask(cropped_raster, mask)    # Applica la maschera
    
    # Definisci il percorso di salvataggio
    output_path <- file.path(output_folder, basename(raster_path))
    
    # Salva il raster clippato
    writeRaster(masked_raster, output_path, overwrite = TRUE)
    
    # Rimuovi il raster dall'ambiente per liberare memoria
    rm(r, cropped_raster, masked_raster)
    gc()  # Richiama la garbage collection per liberare memoria
    
    message("Processed: ", raster_path)
  }, error = function(e) {
    message("Error processing: ", raster_path, " - ", e)
  })
}

# Applica la funzione a tutti i file raster
lapply(rasters_to_keep, process_raster, mask = europe_mask, output_folder = output_folder)




## su server


# filtro AOH_EU == 1 per paese. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

input_folder <- "EU_final/"  
output_folder <- "IT_AOH/"
dir.create(output_folder, recursive = F)

raster_files <- list.files(input_folder, pattern = "\\.tif$", full.names = TRUE)
length(raster_file)
ita_mask <- vect("IT/data_input/italian_territory.shp")
print(crs(ita_mask))
test <- rast(raster_files[1])
crs(ita_mask) == crs(test)

# Lista dei file raster (primi 10)
rasters_to_keep <- list()

for (raster_file in raster_files) {
  cat("Processing:", raster_file, "\n")
  
  r <- rast(raster_file)
  
  # Check CRS compatibility
  if (!crs(ita_mask) == crs(r)) {
    cat("Skipping raster: CRS not compatible with ita_mask\n")
    next
  }
  
  # Check if extents intersect
  if (!relate(ext(r), ext(ita_mask), "intersects")) {
    cat("Skipping raster: no intersection with ita_mask\n")
    next
  }
  
  # Apply the mask
  r_masked <- mask(r, ita_mask)
  
  # Calculate global sum and check for valid values
  sum_values <- unlist(global(r_masked == 1, fun = "sum", na.rm = TRUE)) # Convert list to numeric
  
  cat("Sum values:", sum_values, "\n")
  
  if (!is.na(sum_values) && sum_values > 0) {
    rasters_to_keep <- c(rasters_to_keep, raster_file)
  }
  
  gc()
}

for (raster_file in rasters_to_keep) {
  # Definisci il percorso di destinazione per ciascun file
  destination_file <- file.path(output_folder, basename(raster_file))
  
  # Copia il file
  if (file.copy(raster_file, destination_file, overwrite = TRUE)) {
    cat("Copied:", raster_file, "to", destination_file, "\n")
  } else {
    cat("Failed to copy:", raster_file, "\n")
  }
}




# uniformo ext su paese. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

input_folder <- "IT_AOH/"  
#IT_AOH_file_list <- as.data.frame(filename(list.files(input_folder, pattern = "\\.tif$")))

output_folder <- "IT_AOH_cropped/"
dir.create(output_folder, recursive = F)

raster_files <- list.files(input_folder, pattern = "\\.tif$", full.names = TRUE)

ita_mask <- vect("IT/data_input/italian_territory.shp")
print(crs(ita_mask))
test <- rast(raster_files[1])
crs(ita_mask) == crs(test)


for (raster_file in raster_files) {
  cat("Processing:", raster_file, "\n")
  
  # Carica il raster
  r <- rast(raster_file)
  
  # Estendi, maschera e ritaglia in base a ita_mask
  r_extended <- extend(r, ita_mask)
  r_masked <- mask(r_extended, ita_mask)
  r_cropped <- crop(r_masked, ita_mask)
  
  # Trasforma tutti i valori diversi da 1 in NA
  r_cropped <- classify(r_cropped, rbind(c(-Inf, 0, NA), c(1, 1, 1), c(1.0001, Inf, NA)))
  
  # Rimuovi la color table
  coltab(r_cropped) <- NULL
  
  # Salva il raster con solo pixel habitat (1) e NA per il resto
  output_file <- file.path(output_folder, basename(raster_file))
  writeRaster(r_cropped, output_file, overwrite = TRUE, datatype = "INT1U") # Salva come intero a 8 bit
  
  gc()
}





# uniformo BNR e calcolo % copertura per specie. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

raster_files <- list.files("IT_AOH_cropped/", pattern = "\\.tif$", full.names = TRUE)

# Estrai i nomi delle specie rimuovendo i suffissi (_N, _R, _B) e l'estensione .tif
species_names <- unique(gsub("_[NRB]\\.tif$|\\.tif$", "", basename(raster_files)))
species_names

# Crea una cartella per i raster uniti
output_folder <- "IT_AOH_final/"
#dir.create(output_folder, showWarnings = FALSE)




for (species in species_names) {
  cat("Processing species:", species, "\n")
  
  # Filtra i raster della specie corrente (con o senza suffissi)
  species_rasters <- raster_files[grepl(paste0("^", species, "(_[NRB])?\\.tif$"), basename(raster_files))]
  cat("Found rasters for species:", species_rasters, "\n")
  
  if (length(species_rasters) > 1) {
    # Caso migratorio con piÃ¹ raster (_B, _N, _R)
    cat("Merging raster for species:", species, "\n")
    
    # Leggi i raster
    rasters <- lapply(species_rasters, rast)
    cat("Number of rasters loaded:", length(rasters), "\n")
    
    # Somma i raster pixel per pixel
    merged_raster <- Reduce(function(x, y) sum(x, y, na.rm = TRUE), rasters)
    
    # Imposta i valori maggiori di 1 a 1
    merged_raster[merged_raster > 1] <- 1
    
  } else if (length(species_rasters) == 1) {
    # Caso non migratorio o migratorio con un solo raster (_B, _N, _R)
    cat("No merging needed for species:", species, "\n")
    merged_raster <- rast(species_rasters)
  } else {
    # Nessun raster trovato per la specie (caso improbabile con dati corretti)
    cat("No rasters found for species:", species, "\n")
    next
  }
  
  # Salva il raster unito o copiato
  output_file <- file.path(output_folder, paste0(species, ".tif"))
  tryCatch(
    writeRaster(merged_raster, output_file, overwrite = TRUE),
    error = function(e) cat("Error writing raster for species:", species, "-", e$message, "\n")
  )
  
  gc()
  
}


## calcolo % di copertura, n aree protette intersecate x specie, n 

raster_files <- list.files("IT_AOH_final", pattern = "\\.tif$", full.names = TRUE)
ita_mask <- vect("IT/data_input/italian_territory.shp")

# Prendi la risoluzione del primo raster
reference_raster <- rast(raster_files[1])

# Rasterizza lo shapefile ita_mask con la stessa risoluzione del reference_raster
ita_raster <- rasterize(ita_mask, reference_raster, field = 1)

tot_ita <- sum(!is.na(as.vector(ita_raster)))
tot_ita

# Calcolo percentuale di copertura per ogni raster
percent_coverages <- list()

for (raster_file in raster_files) {
  r <- rast(raster_file)
  
  # Conta i pixel con valore 1 (habitat)
  habitat_pixels <- global(r == 1, "sum", na.rm = TRUE)[1]
  
  # Calcola la percentuale rispetto ai pixel effettivi in Italia
  percent_coverage <- (habitat_pixels / tot_ita) * 100
  
  percent_coverages[[basename(raster_file)]] <- percent_coverage

  gc()
  
}

# Mostra i risultati
print(percent_coverages)
percent_coverage_df <- data.frame(
  species = names(percent_coverages), # Nomi dei file raster (le specie)
  percent_coverage = unlist(percent_coverages) # Valori delle percentuali
)
percent_coverage_df$percent_coverage <- round(percent_coverage_df$percent_coverage, digits = 2)

summary(percent_coverage_df$percent_coverage)


nodes_df <- percent_coverage_df
write.csv(nodes_df, "nodes_df.csv")






##### calcolo n aree protette da wdpa per specie

raster_files <- list.files("IT_AOH_final", pattern = "\\.tif$", full.names = TRUE)
protected_areas <- vect("IT/data_input/wdpa_ita_nodi.shp")

test <- rast(raster_files[1])

protected_areas <- project(protected_areas, crs(test))
crs(protected_areas) == crs(test)
plot(protected_areas)
plot(test, add = T)


# Inizializza il dataframe
percent_coverage_df <- data.frame(
  species = basename(raster_files),  
  percent_coverage = NA,
  total_protected_areas = NA)

# Itera su ogni raster
for (i in seq_along(raster_files)) {
  cat("Processing:", raster_files[i], "\n")
  
  # Carica il raster
  r <- rast(raster_files[i])
  
  # Estrai i valori dalle aree protette
  extracted <- extract(r, protected_areas, touches = TRUE)
  
  # Conta il numero totale di aree protette con habitat
  total_pa_with_habitat <- sum(
    tapply(extracted[, 2], extracted[, 1], function(values) any(values == 1, na.rm = TRUE))
  )
  
  percent_coverage_df$total_protected_areas[i] <- total_pa_with_habitat
  
  gc()
  
}

nodes_df$total_PAs <- percent_coverage_df$total_protected_areas
write.csv(nodes_df, "nodes_df.csv")






########### n PAs con almeno 30% habitat
library(terra)

raster_files <- list.files("IT_AOH_final", pattern = "\\.tif$", full.names = TRUE)[101:310]
test <- rast(raster_files[1])

# Carica il layer delle aree protette (WDPA shapefile)
wdpa <- vect("IT/data_input/wdpa_ita.shp")
wdpa <- project(wdpa, crs(test))
crs(wdpa) == crs(test)

output <- "IT_AOH_0/"
dir.create(output)

for (j in seq_along(raster_files)) {
  raster_file <- raster_files[j]
  cat("Processing:", raster_file, "\n")
  
  # Carica il raster
  r <- rast(raster_file)
  
  # Sostituisci NA con 0
  r[is.na(r)] <- 0
  
  # Salva il raster modificato in un nuovo file
  writeRaster(r, filename = file.path(output, basename(raster_file)), overwrite = TRUE)
  
  gc()
  
}



raster_folder <- "IT_AOH_0"
wdpa_file <- "IT/data_input/wdpa_ita.shp"

# Caricare i dati
wdpa <- vect(wdpa_file)

# Caricare i raster di specie
raster_files <- list.files(raster_folder, pattern = "\\.tif$", full.names = TRUE)

# Proiettare wdpa al CRS del primo raster di specie
ref_raster <- rast(raster_files[1])
wdpa <- project(wdpa, crs(ref_raster))

# Creare un vettore per salvare i risultati
result <- numeric(length(raster_files))
names(result) <- basename(raster_files)

# Funzione per calcolare il numero di aree protette con >=30% habitat
calculate_habitat_coverage <- function(species_raster, wdpa) {
  # Contatore delle aree protette che soddisfano il criterio
  count <- 0
  
  # Loop attraverso ciascuna area protetta
  for (i in seq_len(nrow(wdpa))) {
    # Selezionare una singola area protetta
    pa <- wdpa[i, ]
    
    # Intersecare il raster con l'area protetta
    pa_raster <- crop(species_raster, pa)
    pa_raster <- mask(pa_raster, pa)
    
    # Contare i pixel di habitat (valore = 1) e il totale
    habitat_pixels <- sum(values(pa_raster) == 1, na.rm = TRUE)
    total_pixels <- sum(!is.na(values(pa_raster)))
    
    # Calcolare la percentuale e verificare il criterio
    if (total_pixels > 0 && (habitat_pixels / total_pixels) >= 0.3) {
      count <- count + 1
    }
  }
  
  return(count)
}

# Loop per processare un raster alla volta
for (i in seq_along(raster_files)) {
  cat("Processing", raster_files[i], "...\n")
  
  # Caricare il raster della specie
  species_raster <- rast(raster_files[i])
  
  # Calcolare il numero di aree protette con >=30% habitat
  result[i] <- calculate_habitat_coverage(species_raster, wdpa)
  
  # Pulire la memoria
  rm(species_raster)
  gc()
}

# Output del risultato
print(result)

prova <- as.data.frame(result)

nodes_df <- read.csv("nodes_df.csv")

nodes_df$habitat30 <- prova$result

write.csv(nodes_df, "nodes_df.csv")




######################################################################################################


##########################################################
# RESISTANCE LAYERS: Sr, RLI, dPAs.

######
#Sr (AOH richness)

AOH_richness <- rast(raster_files[1])
values(AOH_richness) <- 0  

for (file in raster_files) {
  cat("Elaborando:", file, "\n") 
  
  aoh_raster <- rast(file)
  
  aoh_raster <- resample(aoh_raster, AOH_richness, method = "near")
  
  aoh_raster[is.na(aoh_raster)] <- 0
  
  AOH_richness <- AOH_richness + aoh_raster
  
  rm(aoh_raster)
  gc()
}

plot(AOH_richness)
head(AOH_richness)


min_r <- min(values(AOH_richness), na.rm = TRUE)  
max_r <- max(values(AOH_richness), na.rm = TRUE)  
min_scale <- 0
max_scale <- 100

res_rescaling <- function(richness, min_r, max_r, min_res, max_res) {
  return(((richness - min_r) / (max_r - min_r)) * (max_res - min_res) + min_res)
}

AOH_richness$resistance <- res_rescaling(values(AOH_richness), 
                                         min_r, max_r, 
                                         min_scale, max_scale)

plot(AOH_richness$resistance)

AOH_richness <- AOH_richness[["resistance"]]

#writeRaster(AOH_richness, "next/res_AOH_richness.tif")

###### RLI

template_raster <- rast(raster_files[1])
values(template_raster) <- 0  
plot(template_raster)
species_data <- read.csv("next/species_iucn.CSV") 
iucn_weights <- c("LC" = 0, "NT" = 1, "VU" = 2, "EN" = 3, "CR" = 4, "EX" = 5)
species_data$weight <- iucn_weights[species_data$iucn]

sum_weights_raster <- template_raster
species_count_raster <- template_raster

for (file in raster_files) {
  cat("Elaborando:", file, "\n")
  species_name <- tools::file_path_sans_ext(basename(file)) 
  aoh_raster <- rast(file)
  aoh_raster <- resample(aoh_raster, template_raster, method = "near")
  aoh_raster[is.na(aoh_raster)] <- 0
  weight <- species_data$weight[species_data$species == species_name]
  
  if (length(weight) == 1) {
    sum_weights_raster <- sum_weights_raster + (aoh_raster * weight)
    species_count_raster <- species_count_raster + aoh_raster  
  }
  
  rm(aoh_raster)
  gc()
}


max_weight_raster <- species_count_raster * 5  
rli_raster <- 1 - (sum_weights_raster / max_weight_raster)
plot(rli_raster)

rli_raster[is.na(rli_raster)] <- NA

min_rli <- min(values(rli_raster), na.rm = TRUE)  
max_rli <- max(values(rli_raster), na.rm = TRUE)  
min_scale <- 0
max_scale <- 100

res_rescaling <- function(richness, min_r, max_r, min_res, max_res) {
  return(((richness - min_r) / (max_r - min_r)) * (max_res - min_res) + min_res)
}

rli_raster$resistance <- res_rescaling(values(rli_raster), 
                                       min_rli, max_rli, 
                                       min_scale, max_scale)

plot(rli_raster$resistance)

rli_raster <- rli_raster[["resistance"]]

#writeRaster(rli_raster, "RLI_Index.tif", overwrite = TRUE)

####### res_dpa

centro_ita <- vect("next/centro_ita.shp")
print(crs(centro_ita))

centro_ita <- terra::project(centro_ita, crs("EPSG:4326"))

centro_pa <- rbind(wdpa_res, iba)

centro_raster <- rasterize(centro_ita, template_raster, field = 1)
crs(centro_raster)

centro_pa_raster <- rasterize(centro_pa, template_raster, field = 1)
crs(centro_pa_raster)

res_dpa <- terra::distance(centro_pa_raster)
res_dpa <- mask(res_dpa, centro_raster)
res_dpa <- res_dpa / 1000


min_d <- min(values(res_dpa), na.rm = TRUE)  
max_d <- max(values(res_dpa), na.rm = TRUE) 
min_scale2 <- 0
max_scale2 <- 100

transform_distance <- function(distance, min_dist, max_dist, min_resist, max_resist) {
  return(((distance - min_dist) / (max_dist - min_dist)) * (max_resist - min_resist) + min_resist)
}

res_dpa$resistance <- transform_distance(values(res_d_pa_centro), 
                                                        min_d, max_d, 
                                                        min_scale2, max_scale2)
res_dpa <- res_dpa[["resistance"]]
res_dpa <- resample(res_dpa, res_pa, method = "near")
#writeRaster(res_dpa, "next/res_dpa.tif")


##############################################################
####################### connectivity #########################

Phase 1: Generate nodes and species-specific resistance layers
n_cores <- detectCores() - 1  
cl <- makeCluster(n_cores)

clusterEvalQ(cl, {
  library(gdistance)
  library(sf)
  return(NULL)
})



res_AOH_richness <- rast("next/res_AOH_richness.tif")
res_rli <- rast("next/res_rli_index.tif")
res_dpa <- rast("next/res_dpa.tif")


aoh_folder <- "next/AOH_centro_all"
raster_files <- list.files(aoh_folder, pattern = "\\.tif$", full.names = TRUE)
names(raster_files) <- gsub(".*/([^/]+)\\.tif$", "\\1", raster_files)

wdpa <- vect("next/wdpa_centro_nodi.shp")
wdpa <- terra::project(wdpa, "EPSG:4326") %>% 
  makeValid()



wdpa_res <- vect("next/wdpa_centro.shp")
wdpa_res <- terra::project(wdpa_res, "EPSG:4326") %>%
  makeValid()

wdpa_res$resistance <- ifelse(grepl("National Park", wdpa_res$DESIG_E), 20,
                              ifelse(grepl("Regional/Provincial Nature Park", wdpa_res$DESIG_E), 40, 80))

template_raster <- rast(raster_files[[1]])
pa_raster <- rasterize(wdpa_res, template_raster, field = "resistance", touches = TRUE)
pa_raster[is.na(pa_raster)] <- 100

iba <- vect("next/iba_centro.shp") %>%  
  terra::project("EPSG:4326") %>% 
  makeValid()

iba$resistance <- 60
iba_raster <- rasterize(iba, template_raster, field = "resistance", touches = TRUE)  

pa_raster <- ifel(pa_raster > 60 & !is.na(iba_raster), 60, pa_raster)
plot(pa_raster)


centro_ita <- vect("next/centro_ita.shp")
centro_ita <- terra::project(centro_ita, crs("EPSG:4326"))
centro_raster <- rasterize(centro_ita, template_raster)
plot(centro_raster)


nodi_list <- list()
for (i in seq_along(raster_files)) {
  species_name <- names(raster_files)[i]
  
  cat("Processing:", species_name, "\n")
  res_AOH_sp <- rast(raster_files[i])
  
  extracted <- terra::extract(res_AOH_sp, wdpa, touches = TRUE)
  protected_ids <- unique(extracted[extracted[, 2] == 1, 1])
  overlapping_areas <- wdpa[protected_ids, ]
  
  if (nrow(overlapping_areas) > 0) {
    centroidi <- centroids(overlapping_areas)
    centroidi_vals <- terra::extract(centro_raster, centroidi)
    valid_centroidi <- !is.na(centroidi_vals[, 2])
    centroidi <- centroidi[valid_centroidi, ]
    nodi_list[[i]] <- data.frame(
      species = species_name,
      x = crds(centroidi)[, 1],
      y = crds(centroidi)[, 2]
    )
    
    overlapping_areas$resistance <- 0
    nodi_raster <- rasterize(overlapping_areas, template_raster, field = "resistance", touches = TRUE)
    res_pa_species <- ifel(!is.na(nodi_raster), 0, pa_raster)
    
    res_AOH_sp <- ifel(is.na(res_AOH_sp), 100, 0)
    
    res_final <- res_AOH_richness + res_rli + res_dpa + res_pa_species + res_AOH_sp
    
    res_final <- crop(res_final, centro_raster)
    res_final <- mask(res_final, centro_raster)
    
    
    writeRaster(res_final, filename = paste0("res_rasters/res_", species_name, ".tif"), overwrite = TRUE)
  }
  gc()
  
}

nodi_list <- do.call(rbind, nodi_list)
write.csv(nodi_list, "res_rasters/nodi_list.csv")
nodi_list <- read.csv("res_rasters/nodi_list.csv")





centro_ita <- vect("next/centro_ita.shp")
centro_ita <- terra::project(centro_ita, crs(res_AOH_richness))
centro_raster <- rasterize(centro_ita, res_AOH_richness)






r <- raster("res_rasters/res_Accipiter_nisus.tif")
valore_max <- maxValue(r)
valore_min <- minValue(r)

conductance <- valore_max + valore_min - r

p <- nodi_list[nodi_list$species == "Accipiter_nisus", c("x", "y")]

calculate_mst <- function(cost_matrix) {
  n <- nrow(cost_matrix)
  
  # Initialize arrays
  parent <- integer(n)  # To store constructed MST
  key <- rep(Inf, n)    # Key values used to pick minimum weight edge
  included <- logical(n)  # To represent set of vertices included in MST
  
  # Always include the first vertex in MST (can be changed to south_index)
  key[1] <- 0
  parent[1] <- -1  # First node is always root of MST
  
  # The MST will have n-1 edges
  for(count in 1:(n-1)) {
    # Pick the minimum key vertex from the set of vertices not yet included in MST
    min_key <- Inf
    min_index <- 0
    
    for(v in 1:n) {
      if(!included[v] && key[v] < min_key) {
        min_key <- key[v]
        min_index <- v
      }
    }
    
    # Add the picked vertex to the MST Set
    included[min_index] <- TRUE
    
    # Update key value and parent index of adjacent vertices
    for(v in 1:n) {
      # Update only if v is not in MST, there is an edge, and edge weight is smaller than current key value
      if(!included[v] && cost_matrix[min_index, v] < key[v]) {
        parent[v] <- min_index
        key[v] <- cost_matrix[min_index, v]
      }
    }
  }
  
  # Return the parent array which defines the MST
  return(parent)
}

clusterExport(cl, c("conductance", "p", "calculate_mst"))

tr <- transition(conductance, transitionFunction = mean, directions = 8)
tr <- geoCorrection(tr)
gc()

cost_matrix <- gdistance::costDistance(tr, as.matrix(p))
gc()

mst_parent <- calculate_mst(as.matrix(cost_matrix))

clusterExport(cl, c("tr", "mst_parent", "p"), envir = environment())
indices <- 2:length(mst_parent)  # Start from 2 as parent[1] = -1
all_paths <- parLapply(cl, indices, function(i) {
  from_idx <- mst_parent[i]
  to_idx <- i
  
  if(from_idx < 1) return(NULL)
  
  from_coords <- as.numeric(p[from_idx,])
  to_coords <- as.numeric(p[to_idx,])
  
  # Here was the error - you referenced from_cell instead of from_coords
  from_cell <- raster::cellFromXY(raster(tr), from_coords)  # CORRECTED LINE
  to_cell <- raster::cellFromXY(raster(tr), to_coords)
  
  from_xy <- raster::xyFromCell(raster(tr), from_cell)
  to_xy <- raster::xyFromCell(raster(tr), to_cell)
  
  path <- gdistance::shortestPath(
    tr,
    from_xy,
    to_xy,
    output = "SpatialLines"
  )
  
  return(st_as_sf(path))
})
stopCluster(cl)

all_paths_combined <- do.call(rbind, all_paths)
if (length(all_paths_combined) > 0) {
  st_write(all_paths_combined, "paths_nt_cm_Accipiter_nisus.shp", delete_dsn = TRUE)
}



plot(rast(resistance))
for (path in all_paths_combined) {
  plot(path, col = "red", lwd = 2, add = TRUE)  
}
points(p, col = "blue", pch = 16, cex = 0.8)
