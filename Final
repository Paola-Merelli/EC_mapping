# final. species specific on Italy for birds

# input data: - world AOH maps for Birds; - protected areas layer form WDPA, and IBAs from LIPU

# Step 0 : process and prepare input data (AOH and wdpa)
# step 1 : Common Conductance
# Step 2 : spSpecific Conductance and nodes
# Step 3 : connectivity
# Step 4 : overlapping



############################################ Step 0 ###############################################
#################### AOH ##################

# AOH downloaded from dryads how to obtain a folder of AOH cropped on Italian territory + transboundary buffer. 

# codice per filtrare i file AOH con extent europea e cropparli -> EU_final da cui partire per poi filtrare i vari paesi

### su locale

# from all -> intersected with ext(eu_admin_no_beyond.shp)
library(terra)
library(sf)
library(dplyr)
setwd("D:/")

eu <- vect("corridors/europe_admin_wgs/eu_admin_nobeyond_wgs.shp")
eu <- project(eu, "EPSG:4326")
crs(eu)
eu_extent <- ext(eu)

prova_crs <- rast("corridors/AOH/Extracted/Birds_migratory_accipitriformes/Accipiter_badius_B.tif")
crs(prova_crs)


base_path <- "corridors/AOH/Extracted/"
ordini <- list.dirs(base_path, recursive = FALSE)
rasters_to_keep <- list()

for (ordine in ordini) {
  
  raster_files <- list.files(ordine, pattern = "\\.tif$", full.names = TRUE)
  
  for (raster_file in raster_files) {
    
    r <- rast(raster_file)
    
    if (relate(ext(r), eu_extent, "intersects")) {
      rasters_to_keep <- append(rasters_to_keep, raster_file)
    }
  }
}

print(rasters_to_keep)

# cosi ne seleziona 1020.  



##### croppo i file all'extent eu

output_folder <- "corridors/AOH/EU_final/"
dir.create(output_folder, recursive =T)

europe_mask <- vect("corridors/europe_admin_wgs/eu_admin_nobeyond_wgs.shp")

# Funzione per processare e salvare un singolo raster
process_raster <- function(raster_path, mask, output_folder) {
  tryCatch({
    # Carica il raster
    r <- rast(raster_path)
    
    # Croppa e maschera il raster
    cropped_raster <- crop(r, mask, snap = "out")  # Croppa il raster
    masked_raster <- mask(cropped_raster, mask)    # Applica la maschera
    
    # Definisci il percorso di salvataggio
    output_path <- file.path(output_folder, basename(raster_path))
    
    # Salva il raster clippato
    writeRaster(masked_raster, output_path, overwrite = TRUE)
    
    # Rimuovi il raster dall'ambiente per liberare memoria
    rm(r, cropped_raster, masked_raster)
    gc()  # Richiama la garbage collection per liberare memoria
    
    message("Processed: ", raster_path)
  }, error = function(e) {
    message("Error processing: ", raster_path, " - ", e)
  })
}

# Applica la funzione a tutti i file raster
lapply(rasters_to_keep, process_raster, mask = europe_mask, output_folder = output_folder)




## su server


# filtro AOH_EU == 1 per paese. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

input_folder <- "EU_final/"  
output_folder <- "IT_AOH/"
dir.create(output_folder, recursive = F)

raster_files <- list.files(input_folder, pattern = "\\.tif$", full.names = TRUE)
length(raster_file)
ita_mask <- vect("IT/data_input/italian_territory.shp")
print(crs(ita_mask))
test <- rast(raster_files[1])
crs(ita_mask) == crs(test)

# Lista dei file raster (primi 10)
rasters_to_keep <- list()

for (raster_file in raster_files) {
  cat("Processing:", raster_file, "\n")
  
  r <- rast(raster_file)
  
  # Check CRS compatibility
  if (!crs(ita_mask) == crs(r)) {
    cat("Skipping raster: CRS not compatible with ita_mask\n")
    next
  }
  
  # Check if extents intersect
  if (!relate(ext(r), ext(ita_mask), "intersects")) {
    cat("Skipping raster: no intersection with ita_mask\n")
    next
  }
  
  # Apply the mask
  r_masked <- mask(r, ita_mask)
  
  # Calculate global sum and check for valid values
  sum_values <- unlist(global(r_masked == 1, fun = "sum", na.rm = TRUE)) # Convert list to numeric
  
  cat("Sum values:", sum_values, "\n")
  
  if (!is.na(sum_values) && sum_values > 0) {
    rasters_to_keep <- c(rasters_to_keep, raster_file)
  }
  
  gc()
}

for (raster_file in rasters_to_keep) {
  # Definisci il percorso di destinazione per ciascun file
  destination_file <- file.path(output_folder, basename(raster_file))
  
  # Copia il file
  if (file.copy(raster_file, destination_file, overwrite = TRUE)) {
    cat("Copied:", raster_file, "to", destination_file, "\n")
  } else {
    cat("Failed to copy:", raster_file, "\n")
  }
}




# uniformo ext su paese. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

input_folder <- "IT_AOH/"  
# folder with all AOH files having 1 on italy but still at random ext on EU

ita_mask_path <- "prenodi/prova_transboundary/ita_30_trans_wgs.shp" 
output_folder <- "IT_AOH_cropped/"  
num_cores <- 8

file_chunks <- split(raster_files, cut(seq_along(raster_files), num_cores, labels = FALSE))

process_chunk <- function(chunk_files) {
  library(terra)
  ita_mask <- terra::vect(ita_mask_path)
  template_extent <- ext(ita_mask)
  template <- rast(template_extent, resolution = c(0.0009920726, 0.0009920815))
  crs(template) <- crs(ita_mask)
  template[] <- 1
  
  results <- character()
  
  for (raster_file in chunk_files) {
    result <- tryCatch({
      r <- terra::rast(raster_file)
      r_resampled <- terra::resample(r, template)
      r_extended <- terra::extend(r_resampled, ita_mask)
      r_cropped <- terra::crop(r_extended, ita_mask)
      r_masked <- terra::mask(r_cropped, ita_mask)
      r_final <- terra::classify(r_masked, rbind(c(-Inf, 0, NA), c(1, 1, 1), c(1.0001, Inf, NA)))
      terra::coltab(r_final) <- NULL
      output_file <- file.path(output_folder, basename(raster_file))
      terra::writeRaster(r_final, output_file, overwrite = TRUE, datatype = "INT1U")
      
      r <- NULL
      r_resampled <- NULL
      r_masked <- NULL
      r_cropped <- NULL
      r_extended <- NULL
      r_final <- NULL
      gc()
      
      paste("Successfully processed:", raster_file)
    }, error = function(e) {
      paste("Error processing", raster_file, ":", e$message)
    })
    
    results <- c(results, result)
  }
  
  return(results)
}
cl <- makeCluster(num_cores)

clusterExport(cl, c("ita_mask_path", "output_folder", "process_chunk"))
clusterEvalQ(cl, library(terra))
gc()
all_results <- parLapply(cl, file_chunks, process_chunk)
stopCluster(cl)
all_results <- unlist(all_results)



############ uniformo BNR

raster_files <- list.files("IT_AOH_cropped/", pattern = "\\.tif$", full.names = TRUE)
species_names <- unique(gsub("_[NRB]\\.tif$|\\.tif$", "", basename(raster_files)))
output_folder <- "IT_AOH_final_trans/"
num_cores <- 8
species_chunks <- split(species_names, cut(seq_along(species_names), num_cores, labels = FALSE))

process_species_chunk <- function(species_chunk) {
  library(terra)
  
  results <- character()
  
  for (species in species_chunk) {
    result <- tryCatch({
      species_rasters <- raster_files[grepl(paste0("^", species, "(_[NRB])?\\.tif$"), basename(raster_files))]
      
      if (length(species_rasters) > 1) {
        rasters <- lapply(species_rasters, rast)
        merged_raster <- Reduce(function(x, y) sum(x, y, na.rm = TRUE), rasters)
        merged_raster[merged_raster > 1] <- 1
        
      } else if (length(species_rasters) == 1) {
        merged_raster <- rast(species_rasters)
      } else {
        return(paste("No rasters found for species:", species))
      }
      
      output_file <- file.path(output_folder, paste0(species, ".tif"))
      writeRaster(merged_raster, output_file, overwrite = TRUE)
      
      merged_raster <- NULL
      gc()
      
      paste("Successfully processed species:", species)
    }, error = function(e) {
      paste("Error processing species:", species, "-", e$message)
    })
    
    results <- c(results, result)
  }
  
  return(results)
}
cl <- makeCluster(num_cores)
clusterExport(cl, c("raster_files", "output_folder", "process_species_chunk"))
all_results <- parLapply(cl, species_chunks, process_species_chunk)
stopCluster(cl)


# vedi "all" per analisi su n aree protette per specie, % di copertura per specie





###################  WDPA ##########################

wdpa_dir <- "prenodi/prova_transboundary/wdpa_all/"
wdpa_files <- list.files(wdpa_dir, pattern = "\\.shp$", full.names = T)
wdpa <- lapply(wdpa_files, vect)
wdpa_all <- do.call(rbind, wdpa)
wdpa_all <- makeValid(wdpa_all)
ita_10_trans <- terra::project(ita_10_trans, crs("EPSG:3035"))
ita_10_trans <- makeValid(ita_10_trans)

wdpa_10_trans <- crop(wdpa_all, ita_10_trans)
wdpa_10_trans <- mask(wdpa_10_trans, ita_10_trans)

plot(wdpa_10_trans)

names(wdpa_10_trans)

wdpa_filtered <- wdpa_10_trans[!(wdpa_10_trans$MARINE == "marine" | 
                                   grepl("Birds Directive", wdpa_10_trans$DESIG_E) | 
                                   grepl("Habitats Directive", wdpa_10_trans$DESIG_E)) |
                                   grepl("SVI", wdpa_10_trans$ISO3), ]

wdpa_sf <- st_as_sf(wdpa_filtered)
wdpa_sf$group_id <- 1:nrow(wdpa_sf)
dissolve_connected_components <- function(sf_layer) {
  # Trova solo quelli che si toccano (no sovrapposizione)
  neighbors <- st_touches(sf_layer)
  
  group <- rep(NA_integer_, length(neighbors))
  current_group <- 1
  
  for (i in seq_along(neighbors)) {
    if (is.na(group[i])) {
      # BFS per propagare il gruppo
      to_visit <- c(i)
      while (length(to_visit) > 0) {
        idx <- to_visit[1]
        to_visit <- to_visit[-1]
        if (is.na(group[idx])) {
          group[idx] <- current_group
          new_neighbors <- neighbors[[idx]]
          to_visit <- c(to_visit, new_neighbors[is.na(group[new_neighbors])])
        }
      }
      current_group <- current_group + 1
    }
  }
  
  cat("Totale gruppi trovati:", length(unique(group)), "\n")
  sf_layer$group_id <- group
  
  dissolved <- sf_layer %>%
    group_by(group_id) %>%
    summarise(geometry = st_union(geometry), .groups = "drop")
  
  return(dissolved)
}
wdpa_dissolved <- dissolve_connected_components(wdpa_sf)

st_write(wdpa_dissolved, "prenodi/prova_transboundary/wdpa_nodi_final_10_tr.shp", overwrite= T)

wdpa_con <- wdpa_10_trans[!(wdpa_10_trans$MARINE == "marine" )|
                           grepl("SVI"], wdpa_10_trans$ISO3
plot(wdpa_con)
writeVector(wdpa_con, "prenodi/prova_transboundary/wdpa_con_final_10_tr.shp", overwrite= T)


############################################ Step 1 : Common conductance #####################################################
############################ AOH Richness
raster_files <- list.files("IT_AOH_final_trans/", pattern = "\\.tif$", full.names = TRUE)

template_file <- rast(raster_files[1])
template_file[] <- 0
plot(template_file)

num_cores <- 8
cl <- makeCluster(num_cores)
registerDoParallel(cl)

chunk_size <- ceiling(length(raster_files) / num_cores)
file_chunks <- split(raster_files, ceiling(seq_along(raster_files) / chunk_size))

temp_dir <- "temp_rasters"
#dir.create(temp_dir, showWarnings = FALSE)

partial_results <- foreach(i = seq_along(file_chunks), 
                           .packages = c("terra")) %dopar% {
                            chunk <- file_chunks[[i]]
                             
                            local_template <- rast(chunk[1])
                            local_template <- 0
                            partial_sum <- local_template
                            
                            for (file in chunk) {
                               aoh_raster <- rast(file)
                               aoh_raster[is.na(aoh_raster)] <- 0
                               partial_sum <- partial_sum + aoh_raster
                               rm(aoh_raster)
                               gc()
                             }
                             
                             temp_file <- file.path(temp_dir, paste0("partial_", i, ".tif"))
                             writeRaster(partial_sum, temp_file, overwrite = TRUE)
                             return(temp_file)
                           }

stopCluster(cl)
for (temp_file in partial_results) {
  if (file.exists(temp_file)) {
    partial_raster <- rast(temp_file)
    AOH_richness <- template_file + partial_raster
    rm(partial_raster)
    file.remove(temp_file)
    gc()
  } else {
    warning(paste("File not found:", temp_file))
  }
}
unlink(temp_dir, recursive = TRUE)

plot(AOH_richness)
head(AOH_richness)


min_r <- min(values(AOH_richness), na.rm = TRUE)  
max_r <- max(values(AOH_richness), na.rm = TRUE)  
min_scale <- 0
max_scale <- 100

con_rescaling <- function(richness, min_r, max_r, min_res, max_res) {
  return(((richness - min_r) / (max_r - min_r)) * (max_res - min_res) + min_res)
}

AOH_richness$conductance <- con_rescaling(values(AOH_richness), 
                                         min_r, max_r, 
                                         min_scale, max_scale)

plot(AOH_richness$conductance)

AOH_richness <- AOH_richness[["conductance"]]

#writeRaster(AOH_richness, "final/con_AOH_richness.tif")






############################### res_rli


species_data <- read.csv("final/species_iucn.csv") 
species_data$Scientific.name <- gsub(" ", "_", species_data$Scientific.name)
iucn_weights <- c("LC" = 0, "NT" = 1, "VU" = 2, "EN" = 3, "CR" = 4, "EX" = 5)
species_data$weight <- iucn_weights[species_data$RL.Category]

num_cores <- detectCores() - 8
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Dividi i file in chunks
chunk_size <- ceiling(length(raster_files) / num_cores)
file_chunks <- split(raster_files, ceiling(seq_along(raster_files) / chunk_size))

# Crea cartella temporanea
temp_dir <- "temp_rasters_iucn"
dir.create(temp_dir, showWarnings = FALSE)

# Elabora i chunks in parallelo
partial_results <- foreach(i = seq_along(file_chunks), 
                           .packages = c("terra", "tools"),
                           .export = c("species_data", "iucn_weights", "temp_dir")) %dopar% {
                             
                             chunk <- file_chunks[[i]]
                             
                             # Crea template dal primo file del chunk
                             template_file <- rast(chunk[1])
                             
                             # Inizializza i raster per questo worker
                             weight_sum <- template_file
                             species_count <- template_file
                             values(weight_sum) <- 0
                             values(species_count) <- 0
                             
                             for (file in chunk) {
                               species_name <- file_path_sans_ext(basename(file))
                               
                               # Elabora solo se la specie è nei dati IUCN
                               weight_idx <- which(species_data$Scientific.name == species_name)
                               
                               if (length(weight_idx) == 1) {
                                 weight <- species_data$weight[weight_idx]
                                 
                                 # Carica e processa il raster
                                 aoh_raster <- rast(file)
                                 aoh_raster[is.na(aoh_raster)] <- 0
                                 
                                 # Aggiorna i conteggi
                                 weight_sum <- weight_sum + (aoh_raster * weight)
                                 species_count <- species_count + aoh_raster
                                 
                                 # Pulizia memoria
                                 rm(aoh_raster)
                                 gc()
                               }
                             }
                             
                             # Salva i risultati parziali
                             weight_file <- file.path(temp_dir, paste0("weight_", i, ".tif"))
                             count_file <- file.path(temp_dir, paste0("count_", i, ".tif"))
                             
                             writeRaster(weight_sum, weight_file, overwrite = TRUE)
                             writeRaster(species_count, count_file, overwrite = TRUE)
                             
                             return(list(weight_file = weight_file, count_file = count_file))
                           }

stopCluster(cl)

sum_weights_raster <- template_file
species_count_raster <- template_file
for (result in partial_results) {
  if (file.exists(result$weight_file)) {
    partial_weight <- rast(result$weight_file)
    sum_weights_raster <- sum_weights_raster + partial_weight
    rm(partial_weight)
    file.remove(result$weight_file)
  } else {
    warning(paste("Weight file not found:", result$weight_file))
  }
  
  if (file.exists(result$count_file)) {
    partial_count <- rast(result$count_file)
    species_count_raster <- species_count_raster + partial_count
    rm(partial_count)
    file.remove(result$count_file)
  } else {
    warning(paste("Count file not found:", result$count_file))
  }
  
  gc()
}
unlink(temp_dir, recursive = TRUE)

plot(sum_weights_raster)
plot(species_count_raster)
max_weight_raster <- species_count_raster * 5  
rli_raster <- 1 - (sum_weights_raster / max_weight_raster)
plot(rli_raster)
rli_raster[is.na(rli_raster)] <- NA

min_r <- min(values(rli_raster), na.rm = TRUE)  
max_r <- max(values(rli_raster), na.rm = TRUE)  
min_scale <- 0
max_scale <- 100

inv_con_rescaling <- function(richness, min_r, max_r, min_res, max_res) {
  return(((max_r - richness) / (max_r - min_r)) * (max_res - min_res) + min_res)
}

rli_raster$conductance <- inv_con_rescaling(values(rli_raster), 
                                          min_r, max_r, 
                                          min_scale, max_scale)

plot(rli_raster$conductance)

rli_raster <- rli_raster[["conductance"]]

#writeRaster(rli_raster, "con_RLI_Index.tif", overwrite = TRUE)




################################ res_dpa

ita <- vect(ita_mask_path)
wdpa_con <- vect("prenodi/prova_transboundary/wdpa_con_final_30_tr.shp")
iba <- vect("final/IBAsGlobal_2024_September_03/IBAsGlobal_2024_September_POL_03.shp")
iba_ita <- crop(iba, ita)
iba_ita <- mask(iba_ita, ita)
iba_ita <- terra::project(iba_ita, crs("EPSG:3035"))
ita_pa <- rbind(wdpa_con, iba_ita)
template_file <- terra::project(template_file, crs("EPSG:3035"))
ita <- terra::project(ita, crs("EPSG:3035"))
ita_raster <- rasterize(ita, template_file, field = 1)
crs(ita_raster)
ita_pa_raster <- rasterize(ita_pa, template_file, field = 1)
plot(ita_pa_raster)
res_dpa <- terra::distance(ita_pa_raster)
res_dpa <- mask(res_dpa, ita_raster)
res_dpa <- res_dpa / 1000
plot(res_dpa)

min_d <- min(values(res_dpa), na.rm = TRUE)  
max_d <- max(values(res_dpa), na.rm = TRUE) 
min_scale2 <- 0
max_scale2 <- 100


inv_con_rescaling <- function(distance, min_d, max_d, min_res, max_res) {
  return(((max_d - distance) / (max_d - min_d)) * (max_res - min_res) + min_res)
}

res_dpa$conductance <- inv_con_rescaling(values(res_dpa), 
                                            min_d, max_d, 
                                            min_scale2, max_scale2)

res_dpa <- res_dpa[["conductance"]]
res_dpa <- terra::project(res_dpa, crs("EPSG:4326))
plot(res_dpa)
#writeRaster(res_dpa, "res_dpa.tif")




############################## con_common

#con_dpa <- rast("res_dpa.tif")
#con_richness <- rast("con_AOH_richness.tif")
#con_rli <- rast("con_RLI_Index.tif")
#ita_mask_path <- "prenodi/prova_transboundary/ita_30_trans_wgs.shp"
#ita <- vect(ita_mask_path)

con_richness <- crop(con_richness, ita)
con_richness <- mask(con_richness, ita)

con_rli[is.na(con_rli)] <- 0
con_rli <- crop(con_rli, ita)
con_rli <- mask(con_rli, ita)

con_dpa <- crop(con_dpa, ita)
con_dpa <- mask(con_dpa, ita)

ext(con_dpa) <- ext(con_richness)
con_dpa <- resample(con_dpa, con_richness)
con_common <- con_richness + con_rli + con_dpa
writeRaster(con_common, "...")
plot(con_common)





############################################ Step 2 : spSpecific Conductance and nodes ###########################################
aoh_folder <- "ITA_AOH_final_trans"
raster_files <- list.files(aoh_folder, pattern = "\\.tif$", full.names = TRUE)
ita <- vect("prenodi/prova_transboundary/ita_30_trans_wgs.shp")
con_common <- rast("prenodi/prova_transboundary/con_common_trans_30.tif")

wdpa_nodi <- vect("prenodi/prova_transboundary/wdpa_nodi_final_30_tr.shp") %>% terra::project(crs(AOH))
wdpa_con <- vect("prenodi/prova_transboundary/wdpa_con_final_30_tr.shp") %>% terra::project(crs(AOH))

wdpa_con$conductance <- ifelse(grepl("National Park", wdpa_con$DESIG_E), 80,
                               ifelse(grepl("Regional/Provincial Nature Park", wdpa_con$DESIG_E), 60, 20))

template <- rast(raster_files[1])
pa_raster <- rasterize(wdpa_con, template, field = "conductance", touches = TRUE)
pa_raster[is.na(pa_raster)] <- 0
pa_raster <- pa_raster["conductance"]
pa_raster <- crop(pa_raster, ita) %>% mask(ita)

iba <- vect("final/IBAsGlobal_2024_September_03/IBAsGlobal_2024_September_POL_03.shp") %>%
                                        crop(ita) %>%
                                        mask(ita) %>% 
                                        makeValid()


iba$conductance <- 40
iba_raster <- rasterize(iba, template, field = "conductance", touches = TRUE)  

pa_raster <- ifel(pa_raster < 40 & !is.na(iba_raster), 40, pa_raster)
pa_raster <- pa_raster["conductance"]
plot(pa_raster)



extracted <- terra::extract(AOH, wdpa_nodi, touches = TRUE)
protected_ids <- unique(extracted[extracted[, 2] == 1, 1])
overlapping_areas <- wdpa_nodi[protected_ids, ]

centroidi <- centroids(overlapping_areas)
centroidi_vals <- terra::extract(ita, centroidi)
valid_centroidi <- !is.na(centroidi_vals[, 2])
centroidi <- centroidi[valid_centroidi, ]
  
nodi_sf <- st_as_sf(centroidi)
plot(nodi_sf, add = T)
st_write(nodi_sf, "prenodi/prova_transboundary/nodi_Spinus_spinus_30_tr.shp")
  
overlapping_areas$conductance <- 100
nodi_raster <- rasterize(overlapping_areas, AOH, field = "conductance", touches = TRUE)
con_pa_species <- ifel(!is.na(nodi_raster), 100, pa_raster)
con_AOH_sp <- ifel(is.na(AOH), 0, 100)


con_common <- rast("prenodi/prova_transboundary/con_common_trans_30.tif")
ext(con_common)
con_sp_final <- con_common + con_pa_species + con_AOH_sp
plot(con_sp_final)
writeRaster(con_sp_final, "prenodi/prova_transboundary/con_final_Spinus_spinus_30_tr.tif", overwrite = TRUE)
  
  
  
  

conductance <- raster("prenodi/prova_transboundary/con_final_Spinus_spinus_30_tr.tif")
p <- vect("prenodi/prova_transboundary/nodi_Spinus_spinus_30_tr.shp")














n_cores <- detectCores() - 12
cl <- makeCluster(n_cores)

clusterEvalQ(cl, {
  library(gdistance)
  library(sf)
  library(raster)  # Make sure raster is explicitly loaded
  return(NULL)
})


conductance <- rast("prenodi/prova_transboundary/con_final_Spinus_spinus_30_tr.tif")
values(conductance)[values(conductance) == 0] <- 1e-10
p <- vect("nodi_Spinus_spinus_30_tr.shp")
p <- terra::project(p, "EPSG:3035")
conductance <- terra::project(conductance, "EPSG:3035")

ita_10_tr <- vect("prenodi/prova_transboundary/ita_10_tr.shp")
conductance <- crop(conductance, ita_10_tr)
conductance <- mask(conductance, ita_10_tr)
p <- crop(p, ita_10_tr)
p <- mask(p, ita_10_tr)

conductance_lowres <- terra::aggregate(conductance, fact=10, fun="mean")
conductance_lowres <- raster(conductance_lowres)
res(conductance_lowres)

tr_low <- gdistance::transition(conductance_lowres, transitionFunction = mean, directions = 8)
tr_low <- gdistance::geoCorrection(tr_low)
gc()
#saveRDS(tr, file = "tr_Spinus.rds")


conductance <- raster(conductance)
tr_high <- gdistance::transition(conductance, transitionFunction = mean, directions = 8)
tr_high <- gdistance::geoCorrection(tr_high)
gc()

p_coords <- as.matrix(crds(p))

points_df <- data.frame(
  point_id = 1:nrow(p_coords),
  x = p_coords[,1],
  y = p_coords[,2]
)

points_df$x_round <- round(points_df$x, digits=6)
points_df$y_round <- round(points_df$y, digits=6)

# Identify duplicates
duplicate_groups <- points_df %>%
  group_by(x_round, y_round) %>%
  filter(n() > 1) %>%
  arrange(x_round, y_round)

print(duplicate_groups)

indices_to_keep <- 1:length(p)
indices_to_keep <- indices_to_keep[indices_to_keep != 185]  # Remove point 140
p_unique <- p[indices_to_keep]

p_coords <- as.matrix(crds(p_unique))

euclidean_dist <- dist(p_coords)
euclidean_matrix <- as.matrix(euclidean_dist)

# Find point pairs closer than 1km
nearby_pairs <- which(euclidean_matrix < 2000 & euclidean_matrix > 0, arr.ind = TRUE)
print(nearby_pairs)

unique_pairs <- list(
  c(160, 88),
  c(123, 122), 
  c(127, 126),
  c(131, 127)
)

high_res_cost_df <- data.frame(
  from_idx = integer(),
  to_idx = integer(),
  cost = numeric(),
  stringsAsFactors = FALSE
)
for(pair in unique_pairs) {
  from_idx <- pair[1]
  to_idx <- pair[2]
  
  from_coords <- p_coords[from_idx, , drop=FALSE]
  to_coords <- p_coords[to_idx, , drop=FALSE]
  
  # Calculate cost at high resolution
  high_res_cost <- tryCatch({
    cost <- gdistance::costDistance(tr_high, from_coords, to_coords)
    print(paste("High resolution cost:", cost))
    cost
  }, error = function(e) {
    print(paste("Error calculating cost:", e$message))
    NA
  })
  
  # Check if the cost is valid
  if(is.na(high_res_cost) || high_res_cost == 0) {
    print("WARNING: Invalid cost calculated!")
  } else {
    # Add this pair's cost to the data frame
    high_res_cost_df <- rbind(high_res_cost_df, data.frame(
      from_idx = from_idx,
      to_idx = to_idx,
      cost = as.numeric(high_res_cost)
    ))
  }
  
  print("-----------------------------------")
}
gc()
print(high_res_cost_df)

cost_matrix_low <- gdistance::costDistance(tr_low, p_coords)
gc()
max_val <- max(cost_matrix_low[is.finite(cost_matrix_low)], na.rm = TRUE)
cost_matrix_low[!is.finite(cost_matrix_low)] <- max_val * 10
#cost_matrix <- readRDS("cost_matrix_Spinus.rds")


if(inherits(cost_matrix_low, "dist")) {
  cost_matrix_mat <- as.matrix(cost_matrix_low)
} else {
  cost_matrix_mat <- cost_matrix_low
}

for(i in 1:nrow(high_res_cost_df)) {
  from_idx <- high_res_cost_df$from_idx[i]
  to_idx <- high_res_cost_df$to_idx[i]
  cost_val <- high_res_cost_df$cost[i]
  
  # Update in both directions (symmetric matrix)
  cost_matrix_mat[from_idx, to_idx] <- cost_val
  cost_matrix_mat[to_idx, from_idx] <- cost_val
}

# Convert back to dist object if needed
if(inherits(cost_matrix_low, "dist")) {
  cost_matrix_final <- as.dist(cost_matrix_mat)
} else {
  cost_matrix_final <- cost_matrix_mat
}

calculate_mst <- function(cost_matrix) {
  n <- nrow(cost_matrix)
  
  # Initialize arrays
  parent <- integer(n)  # To store constructed MST
  key <- rep(Inf, n)    # Key values used to pick minimum weight edge
  included <- logical(n)  # To represent set of vertices included in MST
  
  # Always include the first vertex in MST (can be changed to south_index)
  key[1] <- 0
  parent[1] <- -1  # First node is always root of MST
  
  # The MST will have n-1 edges
  for(count in 1:(n-1)) {
    # Pick the minimum key vertex from the set of vertices not yet included in MST
    min_key <- Inf
    min_index <- 0
    
    for(v in 1:n) {
      if(!included[v] && key[v] < min_key) {
        min_key <- key[v]
        min_index <- v
      }
    }
    
    # Add the picked vertex to the MST Set
    included[min_index] <- TRUE
    
    # Update key value and parent index of adjacent vertices
    for(v in 1:n) {
      # Update only if v is not in MST, there is an edge, and edge weight is smaller than current key value
      if(!included[v] && cost_matrix[min_index, v] < key[v]) {
        parent[v] <- min_index
        key[v] <- cost_matrix[min_index, v]
      }
    }
  }
  
  # Return the parent array which defines the MST
  return(parent)
}

clusterExport(cl, "calculate_mst")

mst_parent <- calculate_mst(as.matrix(cost_matrix_final))


clusterExport(cl, c("mst_parent", "p_unique"), envir = environment())
saveRDS(p_unique, "p_temp.rds")
saveRDS(tr_high, "tr_high_temp.rds")

indices <- 2:length(mst_parent)

clusterExport(cl, c("mst_parent", "indices"))
all_paths <- parLapply(cl, indices, function(i) {
  library(terra)
  library(sf)
  library(gdistance)
  
  p <- readRDS("p_temp.rds")
  tr_high <- readRDS("tr_high_temp.rds")
  
  from_idx <- mst_parent[i]
  to_idx <- i
  
  if (from_idx < 1) return(NULL)
  
  from_coords <- terra::crds(p[from_idx, ], df = TRUE)
  to_coords <- terra::crds(p[to_idx, ], df = TRUE)
  
  from_cell <- raster::cellFromXY(raster(tr_high), from_coords)
  to_cell <- raster::cellFromXY(raster(tr_high), to_coords)
  
  from_xy <- raster::xyFromCell(raster(tr_high), from_cell)
  to_xy <- raster::xyFromCell(raster(tr_high), to_cell)
  
  # Safe call to shortestPath
  path <- tryCatch({
    gdistance::shortestPath(tr_high, from_xy, to_xy, output = "SpatialLines")
  }, error = function(e) return(NULL))
  
  if (is.null(path)) return(NULL)
  
  # Check for valid bbox
  bbox_vals <- sf::st_bbox(st_as_sfc(st_as_sf(path)))
  if (any(!is.finite(bbox_vals))) return(NULL)
  
  return(st_as_sf(path))
})
stopCluster(cl)
gc()

all_paths_combined <- do.call(rbind, all_paths)
if (length(all_paths_combined) > 0) {
  st_write(all_paths_combined, "paths_Spinus_prova_hybrid_cost.shp", delete_dsn = TRUE)
}



plot(rast(conductance))
for (path in all_paths_combined) {
  plot(path, col = "red", lwd = 2, add = TRUE)  
}
points(p, col = "blue", pch = 16, cex = 0.8)





