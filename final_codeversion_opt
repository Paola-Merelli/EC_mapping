library(tidyverse)
library(terra)
library(future)
library(future.apply)
library(dplyr)


############################################################# AOH prep #################################################################
########################################################################################################################################

## su locale
####### filtrare i file AOH con extent europea e cropparli -> EU_final da cui partire per poi filtrare i vari paesi

eu <- vect("path/to/file.shp") |> 
  project("EPSG:4326")

ordini <- list.dirs("path/to/all/orders/folder/", recursive = T)
raster_files <- unlist(lapply(ordini, list.files, pattern = "\\.tif$", full.names = TRUE))

output_folder <- "path/to/folder" #AOH masked on EU
# dir.create(output_folder, recursive = T)
log_file <- "path/to/log.txt"
# file.create(log_file)

process_file <- function(raster_file, eu, output_folder, log_file) {
  tryCatch({
    r <- rast(raster_file)

    if (relate(ext(r), ext(eu), "intersects")) {
      rc <- crop(r, eu, snap = "out", mask = T)
      writeRaster(rc, file.path(output_folder, basename(raster_file)), overwrite = T)
      rm(rc)
      gc()
    }
  }, error = function(e){
   msg <- paste("- Error:", raster_file, " - ", e$message)
   message(msg)
   write(msg, file = log_file, append = TRUE)
  })
}

plan(multisession)
future_lapply(
  raster_files,
  FUN = process_file,
  eu = eu,
  output_folder = output_folder,
  log_file = log_file
)



##### su server
## dalla cartella con AOH EU estraggo quelle su un certo paese e creo cartella con AOH cropped e merged per quel paese. es ita

ita_path <- "path/to/file.shp"
input_folder <- "path/to/all/EU_files/folder/"
output_folder <- "path/to/folder" #AOH masked on ita + tr
# dir.create(output_folder, recursive = T)
temp_folder <- tempfile()
dir.create(temp_folder, recursive = T, showWarnings = FALSE)
log_file <- "path/to/log.txt"
# file.create(log_file)

process_AOH <- function(input_folder, ita_path, output_folder, temp_folder, log_file ="log.txt") {
  library(terra)
  library(future)
  library(future.apply)
  
  file.create(log_file)
  
  ita_mask <- terra::vect(ita_path) |>
    makeValid() |>
    aggregate() |>
    buffer(width = 100000)
  
  template <- rast(ext = ext(ita_mask), resolution = c(100, 100))
  crs(template) <- "EPSG:3035"
  
  ita_mask <- terra::project(ita_mask, "EPSG:4326")
  template_wgs <- terra::project(template, "EPSG:4326")
  template_wgs[] <- 1
  
  raster_files <- list.files(input_folder, pattern = "\\.tif$", recursive = T)
  
  process_i <- function(raster_file) {
    
    tryCatch({
      r <- rast(raster_file)
      if (relate(ext(r), ext(ita_mask), "intersects")) {
        rc <- r |>
          terra::resample(template_wgs) |>
          terra::extend(ita_mask) |>
          terra::crop(ita_mask, snap = "out", mask = T) |>
          terra::classify(rbind(c(-Inf, 0, NA), c(1, 1, 1), c(1.0001, Inf, NA)))
        coltab(rc) <- NULL
        writeRaster(rc, file.path(temp_folder, basename(raster_file)), overwrite = T)
        rm(r, rc)
        gc()
      }
    }, error = function(e){
      msg <- paste("Error", raster_file, " - ", e$message)
      message(msg)
      write(msg, file = log_file, append = T)
    })
  }
  
  plan(multisession)
  future_lapply(raster_files, process_i)
  
  cf <- list.files(temp_folder, pattern = "\\.tif$", full.names = T)
  sp <- unique(gsub("_[NRB]\\.tif$|\\.tif$", "", basename(cf)))
    
    
  for (s in sp) {
    sr <- cf[grepl(paste0("^", s, "(_[NRB])?\\.tif$"), basename(cf))]
      
    if(length(sr) > 1) {
      rs <- lapply(sr, rast)
      ms <- Reduce(function(x, y) sum(x, y, na.rm = TRUE), rs)
      ms[ms > 1] <- 1
      } else if (length(sr) == 1) {
        ms <- rast(sr)
      } else {
        message("no raster for ", s)
        next
      }
                     
      terra::writeRaster(ms, file.path(output_folder, paste0(s, ".tif")), overwrite = T)    
      rm(ms)
      gc()
    }
}


process_AOH(input_folder,
              ita_path,
              output_folder,
              temp_folder,
              log_file)
unlink(temp_folder, recursive = TRUE)


######################################################## WDPA nodi #################################################################
####################################################################################################################################

ita <- vect("data/ita.shp") |>
  makeValid() |>
  aggregate() |>
  buffer(100000)

wdpa_ita <- vect("data/ITA_wdpa_cleaned.shp") |>
  makeValid() |>
  crop(ita)


wdpa_ita <- st_as_sf(wdpa_ita) |>
  filter(
    !(MARINE == "marine" | str_detect(DESIG_E, "Directive"))
  )

dissolve_adjacent_pa <- function(sf_layer) {
  neighbors <- st_intersects(sf_layer)
  edges <- do.call(rbind, lapply(seq_along(neighbors), function(i) {
    if (length(neighbors[[i]]) > 0) {
      cbind(from = i, to = neighbors[[i]])
    }
  }))
  g <- graph_from_edgelist(edges, directed = FALSE)
  components <- components(g)$membership
  sf_layer$group_id <- components
  
  dissolved <- sf_layer |>
    group_by(group_id) |>
    summarise(geometry = st_union(geometry), .groups = "drop")
  
  return(dissolved)
}

wdpa_diss <- dissolve_adjacent_pa(wdpa_ita)

centroid_extr <- function(sf) {
  sf %>% 
    mutate(
      centroid = st_centroid(geometry), 
      centroid_valid = st_within(centroid, geometry, sparse = F)[,1]
    ) %>%
    rowwise() %>%
    mutate(centroid_final = if (centroid_valid == T) centroid
           else st_point_on_surface(geometry)) %>%
    ungroup() %>%
    mutate(centroid_final = st_sfc(centroid_final, crs = st_crs(sf))) %>%
    {st_geometry(.) <- "centroid_final"; . }
}
centroids <- centroid_extr(wdpa_diss)

st_write(wdpa_diss, "data/wdpa_nodi.gpkg")
st_write(centroids, "data/centroids_nodi.gpkg")

############################## sp_nodes_df
raster_files <- list.files("IT_AOH_final", pattern = "\\.tif$", full.names = TRUE)
test <- rast(raster_files[1])
protected_areas <- vect("data/wdpa_nodi.gpkg") |>
  terra::project(crs(test))

percent_coverage_df <- data.frame(
  species = basename(raster_files),  
  nnodes = NA)

pb <- progress_bar$new(
  format = "[:bar] :current/:total :species",
  total = length(raster_files), clear = FALSE, width = 60
)

for (i in seq_along(raster_files)) {
  r <- rast(raster_files[i])
  extracted <- extract(r, protected_areas, touches = TRUE)
  df_extracted <- as.data.frame(extracted)
  nnodes <- df_extracted %>%
    group_by(ID) %>%
    summarise(covered = any(.data[[names(df_extracted)[2]]] == 1, na.rm = T), .groups = "drop") %>%
    summarise(nnodes = sum(covered)) %>%
    pull(nnodes)
  percent_coverage_df$nnodes[i] <- nnodes
  pb$tick(tokens = list(species = basename(raster_files[i])))

}

sp_nodes_df <- percent_coverage_df |>
  dplyr::arrange(nnodes)
write.csv(sp_nodes_df, "data/sp_nodes_df.csv")



##################################################################################################################################
################################################### resistance ###################################################################
inv_rescale <- function (r, max_scale) {
  r_scale <- global(r, fun = range, na.rm = T)
  r_min <- r_scale[1, 1]
  r_max <- r_scale[1, 2]
  r_rescaled <- ((r_max - r) / (r_max - r_min) * max_scale)
  return(r_rescaled)
}

dir_rescale <- function(r, max_scale) {
  r_scale <- global(r, fun = range, na.rm = T)
  r_min <- r_scale[1, 1]
  r_max <- r_scale[1, 2]
  r_rescaled <- ((r - r_min) / (r_max - r_min) * max_scale)
  return(r_rescaled)
}


############################ AOH richness

raster_files <- list.files("IT_AOH_final/", pattern = "\\.tif$", full.names = TRUE)
file_chunks <- split(raster_files, ceiling(seq_along(raster_files) / ceiling(length(raster_files) / 4)))
temp_dir <- "temp_rasters"
#dir.create(temp_dir, showWarnings = FALSE)

cl <- makeCluster(4)
registerDoParallel(cl)
partial_results <- foreach(i = seq_along(file_chunks), .packages = "terra") %dopar% {
  chunk <- file_chunks[[i]]
  pre_sum <- rast(chunk[1])
  pre_sum[is.na(pre_sum)] <- 0
  
  if (length(chunk) > 1) {
    for (file in chunk[-1]) {
      r <- rast(file)
      r[is.na(r)] <- 0
      pre_sum <- pre_sum + r
      rm(r)
      gc()
    }
  }
  
  temp_file <- file.path(temp_dir, paste0("partial_", i, ".tif"))
  writeRaster(pre_sum, temp_file, overwrite = TRUE)
  rm(pre_sum)
  gc()
  return(temp_file)
}
stopCluster(cl)

richness <- rast(partial_results[[1]])
for (temp_file in partial_results[-1]) {
  r <- rast(temp_file)
  richness <- richness + r
  rm(r)
  file.remove(temp_file)
  gc()
}
unlink(temp_dir, recursive = TRUE)

richness$resistance <- inv_rescale(richness, max_scale = 100)
plot(richness$resistance)
richness <- richness[["resistance"]]

#writeRaster(richness, "data/richness_res.tif", overwrite = T)

########################################## rli index

#### magari trovare un modo per scaricare direttamente da iucn lista sp uccelli così è sempre updated ???


species_data <- read.csv("data/species_iucn.csv") |>
  mutate(
    Scientific.name = gsub(" ", "_", Scientific.name),
    weight = c("LC" = 0, "NT" = 1, "VU" = 2, "EN" = 3, "CR" = 4, "EX" = 5)[RL.Category]
  )

raster_files <- list.files("IT_AOH_final/", pattern = "\\.tif$", full.names = TRUE)
file_chunks <- split(raster_files, ceiling(seq_along(raster_files) / ceiling(length(raster_files) / 4)))
temp_dir <- "temp_rasters"
#dir.create(temp_dir, showWarnings = FALSE)
r <- rast("temp_rasters/weight_1.tif")
plot(r)
scl <- makeCluster(4)
registerDoParallel(cl)
partial_results <- foreach(i = seq_along(file_chunks), 
                           .packages = c("terra", "tools"),
                           .export = c("species_data", "temp_dir")) %dopar% {
                             chunk <- file_chunks[[i]]
                             if (length(chunk) > 1) { 
                               pre_wgt_sum <- rast(chunk[1])
                               values(pre_wgt_sum) <- 0
                             
                             for (file in chunk) {
                               species_name <- file_path_sans_ext(basename(file))
                               weight_idx <- which(species_data$Scientific.name == species_name)
                              
                               if (length(weight_idx) == 1) {
                                 weight <- species_data$weight[weight_idx]
                                 aoh_raster <- rast(file)
                                 aoh_raster[is.na(aoh_raster)] <- 0
                                 
                                 pre_wgt_sum <- pre_wgt_sum + (aoh_raster * weight)
                                 
                                 rm(aoh_raster)
                                 gc()
                               }
                             } 
                             }
                             
                             # Salva i risultati parziali
                             weight_file <- file.path(temp_dir, paste0("weight_", i, ".tif"))
                             writeRaster(pre_wgt_sum, weight_file, overwrite = TRUE)
                             rm(pre_wgt_sum)
                             gc()
                             return(weight_file)
                           }

stopCluster(cl)

weight_files <- list.files("temp_rasters/", pattern = "\\.tif$", full.names = T)
weight_sum <- rast(weight_files[1])

for (file in weight_files[-1]) {
  r <- rast(file)
  weight_final <- weight_sum + r
  rm(r)
  gc()
}
unlink(temp_dir, recursive = TRUE)

richness <- rast("data/richness_res.tif")
max_weight_raster <- richness * 5  
rli_res <- 1 - (weight_final / max_weight_raster)
rli_res[is.na(rli_res)] <- NA


rli_res$resistance <- dir_rescale(rli_res, max_scale = 100)
rli_res <- rli_res[["resistance"]]
plot(richness)

#writeRaster(rli_res, "data/RLI_Index_res.tif", overwrite = TRUE)


####################################### dpa

ita_mask <- vect("data/ita.shp") |>
  makeValid() |>
  aggregate() |>
  buffer(width = 100000)

wdpa_ita <- vect("data/ITA_wdpa_cleaned.shp") |>
  makeValid() |>
  crop(ita_mask) |>
  (\(x) {
    x[x$MARINE != "marine", ]
  })() |>
  aggregate()

iba <- vect("data/Lipu_IBAs") |>
  makeValid() |>
  terra::project(crs("EPSG:3035")) |>
  crop(ita_mask) |>
  terra::union()

ita_pas <- rbind(wdpa_ita, iba)
plot(ita_pas)

template <- list.files("IT_AOH_final/", pattern = "\\.tif$", full.names = TRUE) |>
  (\(x) rast(x[1]))() |>
  terra::project(crs("EPSG:3035"))

ita_pas_raster <- rasterize(ita_pas, template, field = 1)
plot(ita_pas_raster)

res_dpa <- ita_pas_raster |>
  terra::distance() |>
  mask(ita_mask) |>
  project(crs("EPSG:4326")) |>
  (\(x) x / 100)() |>
  dir_rescale(max_scale = 100)

#writeRaster(res_dpa, "data/dpa_res.tif")

############### poi merge e res common. vedi fx res common

#############################################################################################
################################## sp_specific resistance e nodes

raster_files <- list.files("AOH_LIPU/", pattern = "\\.tif$", full.names = TRUE)
process_species_data <- function(raster_path) {
  library(terra)
  library(sf)
  library(tools)
  on.exit(future:::ClusterRegistry("stop"))

  species_name <- file_path_sans_ext(basename(raster_path))
  
  ita <- terra::vect("data/ita.shp") |> terra::makeValid() |> terra::aggregate() |> terra::buffer(width = 100000)
  wdpa_nodi <- terra::vect("data/wdpa_nodi.gpkg") |> terra::makeValid()
  res_common <- terra::rast("data/res_common3035.tif") 
  res_AOH_sp <- terra::rast(raster_path) |> terra::project(res_common, method = "near")  
  
  extracted <- terra::extract(res_AOH_sp, wdpa_nodi, touches = TRUE)
  protected_ids <- unique(extracted[extracted[, 2] == 1, 1])
  
  overlapping_areas <- sf::st_as_sf(wdpa_nodi[protected_ids, ]) |>
    sf::st_make_valid()
  centroid_extr <- function(sf) {
    sf %>% 
      mutate(
        centroid = st_centroid(geometry), 
        centroid_valid = st_within(centroid, geometry, sparse = F)[,1]
      ) %>%
      rowwise() %>%
      mutate(centroid_final = if (centroid_valid == T) centroid
             else st_point_on_surface(geometry)) %>%
      ungroup() %>%
      mutate(centroid_final = st_sfc(centroid_final, crs = st_crs(sf))) %>%
      {st_geometry(.) <- "centroid_final"; . }
  }
  centroids <- centroid_extr(overlapping_areas)
  centroids <- centroids["centroid_final"]
  st_write(centroids, paste0("AOH_LIPU/res_rasters/nodes_", species_name, ".gpkg"), quiet = TRUE)
  
  
  res_AOH_sp <- terra::ifel(is.na(res_AOH_sp), 100, 0)
  res_nodes <- terra::rasterize(overlapping_areas, res_common, field = 0, background = 100)
  res_sp_final <- res_AOH_sp + res_common + res_nodes
  res_sp_final <- terra::crop(res_sp_final, ita, snap = "out", mask = T)
  terra::writeRaster(res_sp_final, filename = paste0("AOH_LIPU/res_rasters/res_", species_name, ".tif"), overwrite = TRUE)
  
  return(TRUE)
}


plan(multisession, workers = 4)
results <- future_map(raster_files, process_species_data, .progress = TRUE)


############################################################################################################
####################################### corridor mapping ###################################################

####################################### mapping sp-specific corridors

####################################### mapping sp-specific corridors
plan(multisession, workers = 2)
options(future.allowRecursive = TRUE)

cleanup <- function() {
  unlink(list.files(tempdir(), full.names = TRUE), recursive = TRUE)
  terra::tmpFiles(remove = TRUE)
  gc()
}

process_species_paths <- function(species_name) {
  on.exit(future:::ClusterRegistry("stop"))
  
  library(terra)
  library(sf)
  library(raster)
  library(gdistance)
  library(furrr)
  
 res_path <- paste0("AOH_LIPU/res_rasters/res_", species_name, ".tif")
 nodes_path <- paste0("AOH_LIPU/res_rasters/nodes_", species_name, ".gpkg")
  
  if (!file.exists(res_path) || !file.exists(nodes_path)) {
    message("Missing files for species: ", species_name)
    return(NULL)
  }
  
  r <- terra::rast(res_path)
  values(r)[values(r) == 0] <- 1e-10
  n <- terra::vect(nodes_path)
  
  r_low <- terra::aggregate(r, fact=3, fun="min") |> raster()
  tr_low <- transition(r_low, mean, directions = 4)
  tr_low <- geoCorrection(tr_low)
  gc()
  
  r_high <- raster(r)
  tr_high <- transition(r_high, mean, directions = 4)
  tr_high <- geoCorrection(tr_high)
  gc()
  
  n_coords <- as.matrix(terra::crds(n))
  
  cm_low <- costDistance(tr_low, n_coords)
  max_val <- max(cm_low[is.finite(cm_low)], na.rm = TRUE)
  cm_low[!is.finite(cm_low)] <- max_val * 10
  gc()
  
  calculate_mst <- function(cost_matrix) {
    n <- nrow(cost_matrix)
    parent <- integer(n)
    key <- rep(Inf, n)
    included <- logical(n)
    key[1] <- 0
    parent[1] <- -1
    for(count in 1:(n-1)) {
      min_index <- which.min(ifelse(included, Inf, key))
      included[min_index] <- TRUE
      for(v in 1:n) {
        if(!included[v] && cost_matrix[min_index, v] < key[v]) {
          parent[v] <- min_index
          key[v] <- cost_matrix[min_index, v]
        }
      }
    }
    return(parent)
  }
  
  mst_parent <- calculate_mst(as.matrix(cm_low))
  indices <- 2:length(mst_parent)
  
  n_file <- tempfile(pattern = paste0("n_", species_name), fileext = ".rds")
  tr_high_file <- tempfile(pattern = paste0("tr_high_", species_name), fileext = ".rds")
  saveRDS(n, n_file)
  saveRDS(tr_high, tr_high_file)
  paths_env <- list(n_path = n_file, tr_path = tr_high_file)
  
  all_paths <- future_map(indices, function(i, paths) {
    message("Worker ", Sys.getpid(), " is processing i = ", i)
    p <- readRDS(paths$n_path)
    tr_high <- readRDS(paths$tr_path)
    
    from_idx <- mst_parent[i]
    to_idx <- i
    if (from_idx < 1) return(NULL)
    
    from_coords <- terra::crds(p[from_idx, ], df = TRUE)
    to_coords <- terra::crds(p[to_idx, ], df = TRUE)
    
    from_cell <- raster::cellFromXY(raster(tr_high), from_coords)
    to_cell <- raster::cellFromXY(raster(tr_high), to_coords)
    
    from_xy <- raster::xyFromCell(raster(tr_high), from_cell)
    to_xy <- raster::xyFromCell(raster(tr_high), to_cell)
    
    path <- tryCatch({
      shortestPath(tr_high, from_xy, to_xy, output = "SpatialLines")
    }, error = function(e) return(NULL))
    gc()
    
    if (is.null(path)) return(NULL)
    terra::crs(path) <- terra::crs(r)
    path_sf <- tryCatch({
      sf_path <- st_as_sf(path)
      if (any(!is.finite(st_bbox(st_as_sfc(sf_path))))) {
        return(NULL)
      }
      sf_path
    }, error = function(e) {
      return(NULL)
    })
    
    return(path_sf)
  }, paths = paths_env, .options = furrr_options(seed = T), .progress = T)
  
  unlink(n_file)
  unlink(tr_high_file)
  gc()
  all_paths <- all_paths[!sapply(all_paths, is.null)]
  if (length(all_paths) > 0) {
    all_paths_combined <- tryCatch({
      do.call(rbind, all_paths)
    }, error = function(e) {
      message("Error combining paths: ", e$message)
      return(NULL)
    })
    
    if (!is.null(all_paths_combined) && nrow(all_paths_combined) > 0) {
      out_dir <- "AOH_LIPU/paths"
      if (!dir.exists(out_dir)) {
        dir.create(out_dir, recursive = TRUE)
      }
      
      out_path <- paste0(out_dir, "/paths_", species_name, ".gpkg")
      st_write(all_paths_combined, out_path, delete_layer = TRUE, quiet = TRUE)
      rm(r, r_low, r_high, tr_low, tr_high, cm_low, mst_parent, all_paths)
      gc()
      return(TRUE)
    } else {
      message("No valid paths to combine for: ", species_name)
    }
  } else {
    message("No valid paths for: ", species_name)
  }
  return(FALSE)
}

test <- process_species_paths("Haematopus_ostralegus")
paths_test <- vect("AOH_LIPU/paths/paths_Haematopus_ostralegus.gpkg")
crs(paths_test) <- "EPSG:3035"
res_test <- rast("AOH_LIPU/res_rasters/res_Haematopus_ostralegus.tif")
n_test <- vect("AOH_LIPU/res_rasters/nodes_Haematopus_ostralegus.gpkg")
plot(res_test)
plot(n_test, add = T)
plot(paths_test, add = T)

files <- list.files("AOH_LIPU/res_rasters/", pattern = "^nodes_.*\\.gpkg$", full.names = FALSE)
species_names <- gsub("^nodes_(.*)\\.gpkg$", "\\1", files)
subset <- c("Arenaria_interpres", "Fratercula_arctica", "Lagopus_muta", "Pandion_haliaetus")
species_names <- species_names[species_names %in% subset]

log_df <- data.frame(
  species = character(),
  status = character(),
  time = character(),
  log_msg = character(),
  stringsAsFactors = FALSE
)

for (species in species_names) {
  message("\n==============================")
  message(" Start: ", species)
  
  start_time <- Sys.time()
  status <- "not_run"
  msg <- NA
  
  result <- tryCatch(
    {
      success <- process_species_paths(species)
      status <- if (isTRUE(success)) "toooop!" else "no_paths"
      status
    },
    error = function(e) {
      msg <- conditionMessage(e)
       "error"
    }
  )
  
  end_time <- Sys.time()
  
  log_df <- rbind(log_df, data.frame(
    species = species, 
    status = status,
    time = format(difftime(end_time, start_time, units = "mins"), digits = 2),
    log_msg = msg,
    stringsAsFactors = FALSE
  ))
  cleanup()
}
  
   
  
  
  
