# codice per filtrare i file AOH con extent europea e cropparli -> EU_final da cui partire per poi filtrare i vari paesi

### su locale

# from all -> intersected with ext(eu_admin_no_beyond.shp)
library(terra)
library(sf)
library(dplyr)
setwd("D:/")

eu <- vect("corridors/europe_admin_wgs/eu_admin_nobeyond_wgs.shp")
eu <- project(eu, "EPSG:4326")
crs(eu)
eu_extent <- ext(eu)

prova_crs <- rast("corridors/AOH/Extracted/Birds_migratory_accipitriformes/Accipiter_badius_B.tif")
crs(prova_crs)


base_path <- "corridors/AOH/Extracted/"
ordini <- list.dirs(base_path, recursive = FALSE)
rasters_to_keep <- list()

for (ordine in ordini) {
  
  raster_files <- list.files(ordine, pattern = "\\.tif$", full.names = TRUE)
  
  for (raster_file in raster_files) {
    
    r <- rast(raster_file)
    
    if (relate(ext(r), eu_extent, "intersects")) {
      rasters_to_keep <- append(rasters_to_keep, raster_file)
    }
  }
}

print(rasters_to_keep)

# cosi ne seleziona 1020.  



##### croppo i file all'extent eu

output_folder <- "corridors/AOH/EU_final/"
dir.create(output_folder, recursive =T)

europe_mask <- vect("corridors/europe_admin_wgs/eu_admin_nobeyond_wgs.shp")

# Funzione per processare e salvare un singolo raster
process_raster <- function(raster_path, mask, output_folder) {
  tryCatch({
    # Carica il raster
    r <- rast(raster_path)
    
    # Croppa e maschera il raster
    cropped_raster <- crop(r, mask, snap = "out")  # Croppa il raster
    masked_raster <- mask(cropped_raster, mask)    # Applica la maschera
    
    # Definisci il percorso di salvataggio
    output_path <- file.path(output_folder, basename(raster_path))
    
    # Salva il raster clippato
    writeRaster(masked_raster, output_path, overwrite = TRUE)
    
    # Rimuovi il raster dall'ambiente per liberare memoria
    rm(r, cropped_raster, masked_raster)
    gc()  # Richiama la garbage collection per liberare memoria
    
    message("Processed: ", raster_path)
  }, error = function(e) {
    message("Error processing: ", raster_path, " - ", e)
  })
}

# Applica la funzione a tutti i file raster
lapply(rasters_to_keep, process_raster, mask = europe_mask, output_folder = output_folder)




## su server


# filtro AOH_EU == 1 per paese. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

input_folder <- "EU_final/"  
output_folder <- "IT_AOH/"
dir.create(output_folder, recursive = F)

raster_files <- list.files(input_folder, pattern = "\\.tif$", full.names = TRUE)
length(raster_file)
ita_mask <- vect("IT/data_input/italian_territory.shp")
print(crs(ita_mask))
test <- rast(raster_files[1])
crs(ita_mask) == crs(test)

# Lista dei file raster (primi 10)
rasters_to_keep <- list()

for (raster_file in raster_files) {
  cat("Processing:", raster_file, "\n")
  
  r <- rast(raster_file)
  
  # Check CRS compatibility
  if (!crs(ita_mask) == crs(r)) {
    cat("Skipping raster: CRS not compatible with ita_mask\n")
    next
  }
  
  # Check if extents intersect
  if (!relate(ext(r), ext(ita_mask), "intersects")) {
    cat("Skipping raster: no intersection with ita_mask\n")
    next
  }
  
  # Apply the mask
  r_masked <- mask(r, ita_mask)
  
  # Calculate global sum and check for valid values
  sum_values <- unlist(global(r_masked == 1, fun = "sum", na.rm = TRUE)) # Convert list to numeric
  
  cat("Sum values:", sum_values, "\n")
  
  if (!is.na(sum_values) && sum_values > 0) {
    rasters_to_keep <- c(rasters_to_keep, raster_file)
  }
  
  gc()
}

for (raster_file in rasters_to_keep) {
  # Definisci il percorso di destinazione per ciascun file
  destination_file <- file.path(output_folder, basename(raster_file))
  
  # Copia il file
  if (file.copy(raster_file, destination_file, overwrite = TRUE)) {
    cat("Copied:", raster_file, "to", destination_file, "\n")
  } else {
    cat("Failed to copy:", raster_file, "\n")
  }
}




# uniformo ext su paese. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

input_folder <- "IT_AOH/"  
#IT_AOH_file_list <- as.data.frame(filename(list.files(input_folder, pattern = "\\.tif$")))

output_folder <- "IT_AOH_cropped/"
dir.create(output_folder, recursive = F)

raster_files <- list.files(input_folder, pattern = "\\.tif$", full.names = TRUE)

ita_mask <- vect("IT/data_input/italian_territory.shp")
print(crs(ita_mask))
test <- rast(raster_files[1])
crs(ita_mask) == crs(test)


for (raster_file in raster_files) {
  cat("Processing:", raster_file, "\n")
  
  # Carica il raster
  r <- rast(raster_file)
  
  # Estendi, maschera e ritaglia in base a ita_mask
  r_extended <- extend(r, ita_mask)
  r_masked <- mask(r_extended, ita_mask)
  r_cropped <- crop(r_masked, ita_mask)
  
  # Trasforma tutti i valori diversi da 1 in NA
  r_cropped <- classify(r_cropped, rbind(c(-Inf, 0, NA), c(1, 1, 1), c(1.0001, Inf, NA)))
  
  # Rimuovi la color table
  coltab(r_cropped) <- NULL
  
  # Salva il raster con solo pixel habitat (1) e NA per il resto
  output_file <- file.path(output_folder, basename(raster_file))
  writeRaster(r_cropped, output_file, overwrite = TRUE, datatype = "INT1U") # Salva come intero a 8 bit
  
  gc()
}





# uniformo BNR e calcolo % copertura per specie. ex ita
library(terra)
library(raster)

#setwd("/media/r_projects/paola.merelli2/assegno_prin/IBAs/")

raster_files <- list.files("IT_AOH_cropped/", pattern = "\\.tif$", full.names = TRUE)

# Estrai i nomi delle specie rimuovendo i suffissi (_N, _R, _B) e l'estensione .tif
species_names <- unique(gsub("_[NRB]\\.tif$|\\.tif$", "", basename(raster_files)))
species_names

# Crea una cartella per i raster uniti
output_folder <- "IT_AOH_final/"
#dir.create(output_folder, showWarnings = FALSE)




for (species in species_names) {
  cat("Processing species:", species, "\n")
  
  # Filtra i raster della specie corrente (con o senza suffissi)
  species_rasters <- raster_files[grepl(paste0("^", species, "(_[NRB])?\\.tif$"), basename(raster_files))]
  cat("Found rasters for species:", species_rasters, "\n")
  
  if (length(species_rasters) > 1) {
    # Caso migratorio con piÃ¹ raster (_B, _N, _R)
    cat("Merging raster for species:", species, "\n")
    
    # Leggi i raster
    rasters <- lapply(species_rasters, rast)
    cat("Number of rasters loaded:", length(rasters), "\n")
    
    # Somma i raster pixel per pixel
    merged_raster <- Reduce(function(x, y) sum(x, y, na.rm = TRUE), rasters)
    
    # Imposta i valori maggiori di 1 a 1
    merged_raster[merged_raster > 1] <- 1
    
  } else if (length(species_rasters) == 1) {
    # Caso non migratorio o migratorio con un solo raster (_B, _N, _R)
    cat("No merging needed for species:", species, "\n")
    merged_raster <- rast(species_rasters)
  } else {
    # Nessun raster trovato per la specie (caso improbabile con dati corretti)
    cat("No rasters found for species:", species, "\n")
    next
  }
  
  # Salva il raster unito o copiato
  output_file <- file.path(output_folder, paste0(species, ".tif"))
  tryCatch(
    writeRaster(merged_raster, output_file, overwrite = TRUE),
    error = function(e) cat("Error writing raster for species:", species, "-", e$message, "\n")
  )
  
  gc()
  
}


## calcolo % di copertura, n aree protette intersecate x specie, n 

raster_files <- list.files("IT_AOH_final", pattern = "\\.tif$", full.names = TRUE)
ita_mask <- vect("IT/data_input/italian_territory.shp")

# Prendi la risoluzione del primo raster
reference_raster <- rast(raster_files[1])

# Rasterizza lo shapefile ita_mask con la stessa risoluzione del reference_raster
ita_raster <- rasterize(ita_mask, reference_raster, field = 1)

tot_ita <- sum(!is.na(as.vector(ita_raster)))
tot_ita

# Calcolo percentuale di copertura per ogni raster
percent_coverages <- list()

for (raster_file in raster_files) {
  r <- rast(raster_file)
  
  # Conta i pixel con valore 1 (habitat)
  habitat_pixels <- global(r == 1, "sum", na.rm = TRUE)[1]
  
  # Calcola la percentuale rispetto ai pixel effettivi in Italia
  percent_coverage <- (habitat_pixels / tot_ita) * 100
  
  percent_coverages[[basename(raster_file)]] <- percent_coverage

  gc()
  
}

# Mostra i risultati
print(percent_coverages)
percent_coverage_df <- data.frame(
  species = names(percent_coverages), # Nomi dei file raster (le specie)
  percent_coverage = unlist(percent_coverages) # Valori delle percentuali
)
percent_coverage_df$percent_coverage <- round(percent_coverage_df$percent_coverage, digits = 2)

summary(percent_coverage_df$percent_coverage)


nodes_df <- percent_coverage_df
write.csv(nodes_df, "nodes_df.csv")






##### calcolo n aree protette da wdpa per specie

raster_files <- list.files("IT_AOH_final", pattern = "\\.tif$", full.names = TRUE)
protected_areas <- vect("IT/data_input/wdpa_ita.shp")

test <- rast(raster_files[1])

protected_areas <- project(protected_areas, crs(test))
crs(protected_areas) == crs(test)
plot(protected_areas)
plot(test, add = T)


# Inizializza il dataframe
percent_coverage_df <- data.frame(
  species = basename(raster_files),  
  percent_coverage = NA,
  total_protected_areas = NA)

# Itera su ogni raster
for (i in seq_along(raster_files)) {
  cat("Processing:", raster_files[i], "\n")
  
  # Carica il raster
  r <- rast(raster_files[i])
  
  # Estrai i valori dalle aree protette
  extracted <- extract(r, protected_areas, touches = TRUE)
  
  # Conta il numero totale di aree protette con habitat
  total_pa_with_habitat <- sum(
    tapply(extracted[, 2], extracted[, 1], function(values) any(values == 1, na.rm = TRUE))
  )
  
  percent_coverage_df$total_protected_areas[i] <- total_pa_with_habitat
  
  gc()
  
}

nodes_df$total_PAs <- percent_coverage_df$total_protected_areas
write.csv(nodes_df, "nodes_df.csv")






########### n PAs con almeno 30% habitat
library(terra)

raster_files <- list.files("IT_AOH_final", pattern = "\\.tif$", full.names = TRUE)[101:310]
test <- rast(raster_files[1])

# Carica il layer delle aree protette (WDPA shapefile)
wdpa <- vect("IT/data_input/wdpa_ita.shp")
wdpa <- project(wdpa, crs(test))
crs(wdpa) == crs(test)

output <- "IT_AOH_0/"
dir.create(output)

for (j in seq_along(raster_files)) {
  raster_file <- raster_files[j]
  cat("Processing:", raster_file, "\n")
  
  # Carica il raster
  r <- rast(raster_file)
  
  # Sostituisci NA con 0
  r[is.na(r)] <- 0
  
  # Salva il raster modificato in un nuovo file
  writeRaster(r, filename = file.path(output, basename(raster_file)), overwrite = TRUE)
  
  gc()
  
}



raster_folder <- "IT_AOH_0"
wdpa_file <- "IT/data_input/wdpa_ita.shp"

# Caricare i dati
wdpa <- vect(wdpa_file)

# Caricare i raster di specie
raster_files <- list.files(raster_folder, pattern = "\\.tif$", full.names = TRUE)

# Proiettare wdpa al CRS del primo raster di specie
ref_raster <- rast(raster_files[1])
wdpa <- project(wdpa, crs(ref_raster))

# Creare un vettore per salvare i risultati
result <- numeric(length(raster_files))
names(result) <- basename(raster_files)

# Funzione per calcolare il numero di aree protette con >=30% habitat
calculate_habitat_coverage <- function(species_raster, wdpa) {
  # Contatore delle aree protette che soddisfano il criterio
  count <- 0
  
  # Loop attraverso ciascuna area protetta
  for (i in seq_len(nrow(wdpa))) {
    # Selezionare una singola area protetta
    pa <- wdpa[i, ]
    
    # Intersecare il raster con l'area protetta
    pa_raster <- crop(species_raster, pa)
    pa_raster <- mask(pa_raster, pa)
    
    # Contare i pixel di habitat (valore = 1) e il totale
    habitat_pixels <- sum(values(pa_raster) == 1, na.rm = TRUE)
    total_pixels <- sum(!is.na(values(pa_raster)))
    
    # Calcolare la percentuale e verificare il criterio
    if (total_pixels > 0 && (habitat_pixels / total_pixels) >= 0.3) {
      count <- count + 1
    }
  }
  
  return(count)
}

# Loop per processare un raster alla volta
for (i in seq_along(raster_files)) {
  cat("Processing", raster_files[i], "...\n")
  
  # Caricare il raster della specie
  species_raster <- rast(raster_files[i])
  
  # Calcolare il numero di aree protette con >=30% habitat
  result[i] <- calculate_habitat_coverage(species_raster, wdpa)
  
  # Pulire la memoria
  rm(species_raster)
  gc()
}

# Output del risultato
print(result)

prova <- as.data.frame(result)

nodes_df <- read.csv("nodes_df.csv")

nodes_df$habitat30 <- prova$result

write.csv(nodes_df, "nodes_df.csv")






